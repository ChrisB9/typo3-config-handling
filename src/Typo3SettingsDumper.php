<?php
declare(strict_types=1);
namespace Helhum\TYPO3\ConfigHandling;

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2017 Helmut Hummel <info@helhum.io>
 *  All rights reserved
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *  A copy is found in the text file GPL.txt and important notices to the license
 *  from the author is found in LICENSE.txt distributed with these scripts.
 *
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

use TYPO3\CMS\Core\Configuration\ConfigurationManager;
use TYPO3\CMS\Core\Utility\ArrayUtility;

class Typo3SettingsDumper
{
    /**
     * @var ConfigurationManager
     */
    private $configurationManager;

    /**
     * @var ConfigCleaner
     */
    private $configCleaner;

    /**
     * @var ConfigDumper
     */
    private $configDumper;

    public function __construct(
        ConfigurationManager $configurationManager = null,
        ConfigCleaner $configCleaner = null,
        ConfigDumper $configDumper = null
    ) {
        $this->configurationManager = $configurationManager ?: new ConfigurationManager();
        $this->configCleaner = $configCleaner ?: new ConfigCleaner();
        $this->configDumper = $configDumper ?: new ConfigDumper();
    }

    public function dump(bool $noDev = false, bool $code = false, bool $strict = false, bool $cached = false)
    {
        if ($noDev || $code) {
            if ($code) {
                $configLoader = new Typo3Config();
                $config = $this->configCleaner->cleanConfig($configLoader->readConfig());
                $phpCode = $this->configDumper->getPhpCode($config, $config);
            } else {
                $configLoader = new ConfigLoader(RootConfig::getRootConfigFile($noDev), $strict);
                $config = $this->configCleaner->cleanConfig($configLoader->load());
                $phpCode = ArrayUtility::arrayExport($config);
            }
            $this->writeAdditionalConfiguration(
                [
                    '// Auto generated by helhum/typo3-config-handling',
                    '// Do not edit this file',
                    '$GLOBALS[\'TYPO3_CONF_VARS\'] = ' . $phpCode . ';',
                ]
            );
        } else {
            $this->writeAdditionalConfiguration(
                [
                    '// Auto generated by helhum/typo3-config-handling',
                    '// Do not edit this file',
                    RootConfig::getInitConfigFileContent($strict, $cached),
                ]
            );
        }
        $this->configDumper->dumpToFile(
            [],
            $this->configurationManager->getLocalConfigurationFileLocation(),
            "Auto generated by helhum/typo3-config-handling\nDo not edit this file"
        );
    }

    private function writeAdditionalConfiguration(array $additionalConfigurationLines): bool
    {
        return GeneralUtility::writeFile(
            $this->configurationManager->getAdditionalConfigurationFileLocation(),
            '<?php' . LF .
                implode(LF, $additionalConfigurationLines) . LF
        );
    }
}
